<% include partials/header %>


<div>
  <div class="container-fluid">
    <div class="row">
      <div class="col-4">
        <ul id="user-list"></ul>
      </div>
      <div class="col-8">
        <ul id="messages"></ul>
      </div>
    </div>
  </div>
  <form action="">
    <input id="m" ng-model="message" autocomplete="off" />
    <button ng-click="send()">Send</button>
  </form>
</div>


<!-- Javascript -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.slim.js"></script>
<script src="https://code.jquery.com/jquery-1.11.1.js"></script>
<script>
  var socket = io();
  var online_status_updated = 0;
  var username = '<%- username %>';
  var toID;
  var messageList = [];
  // Ping server.
  socket.on("acknowledgement", function() {
    console.log("Oooo I got an acknowledgement!");
  });
  console.log("received user list outside");
  
  // Get chat-user-list
  socket.on('user-list', function(data){
    console.log("received user list");
    console.log(data.online_status_updated);
    if (data.online_status_updated > online_status_updated) {
      console.log('------------------------------------------');
      console.log('prev online-stat ', online_status_updated);
      console.log('received online-stat ', data.online_status_updated);
      console.log('------------------------------------------');
      var rows = data.rows;
      online_status_updated = data.online_status_updated;
      $('#user-list').empty();
      for (var i = 0; i < rows.length; i++) {
        $('#user-list')
        .append(
            $('<li>')
            .text(rows[i].username + ' ' + rows[i].online).attr('id', rows[i].id)
            .click(rows, function() {
              console.log('old toID : ', toID);
              console.log('new toID : ', this.id);
              toID = this.id;
              console.log('user with id '+ this.id +' was clicked');
              
              // Ask for the conversation(messages) between this user and
              // toID.
              // First empty both markup and messageList
              $('#messages').empty();
              messageList = [];
              $('#messages').append($('<li>').text('Loading'));
              socket.emit('get-conversation', toID, function(messages) {
                // Add all messages to the messageList
                messageList = messages;
                 $('#messages').empty();
                 for (var i = 0; i < messageList.length; i++) {
                   $('#messages').append(
                       $('<li>').text(messages[i].from_id + ' ' + messages[i].content));
                 }
              });
            }))
      }
    }
  });
  
  // This event is usually received when the page is loaded.
  socket.on('all-messages', function(data) {
    for (var i = 0; i < data.length; i++) {
      $('#messages').append($('<li>').text(data[i].content));
    }
  });
  
  //  This event represents a new chat message sent by a user.
  socket.on('new-chat-message', function(data) {
    console.log("handling new message from " + data.fromUsername);
    $('#' + data.fromId).text(data.fromUsername + ' new message');
    // Only display new message if you have the corresponding conversation
    // screen open.
    if (toID == data.fromId) {
      $('#messages').append($('<li>').text(data.fromUsername + ' : ' + data.message));
    }
  });
  
  // This event requests all messages from the server when the page is loaded.
  socket.emit('all-messages');
  
  // Send new message to server
  $(function () {
    $('form').submit(function() {
      console.log("emmiting chat message");
      var content = $('#m').val();
      socket.emit('new-chat-message', {toId: toID, message: content});
      $('#m').val('');
      $('#messages').append($('<li>').text(username + ': ' + content));
      return false;
    });
  });
  
  // This function will be used to sort messages based on id which corresponds
  // to time.
  var messageListSortFunc = function(ob1, ob2) {
    return ob1.id - ob2.id;
  }
  
</script>
<% include partials/footer %>